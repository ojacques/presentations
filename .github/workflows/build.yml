# The name of the workflow as it will appear in the Actions tab 
# of the GitHub repository.
name: build-web-site

# Run this workflow every time a new commit pushed to your repository
on: push

jobs:
  lint:
    name: Markdown Lint
    # Set the agent to run on
    runs-on: ubuntu-latest
    ##################
    # Load all steps #
    ##################
    steps:
      ##########################
      # Checkout the code base #
      ##########################
      - name: Checkout Code
        uses: actions/checkout@v2
        with:
          # Full git history is needed to get a proper list of changed files within `super-linter`
          fetch-depth: 0

      ################################
      # Run Linter against code base #
      ################################
      - name: Lint Code Base
        #uses: github/super-linter@v3.13.1
        # Workaround for https://github.com/github/super-linter/issues/938
        uses: docker://github/super-linter:v3.13.1
        env:
          VALIDATE_ALL_CODEBASE: true
          VALIDATE_MARKDOWN: true
          DEFAULT_BRANCH: main
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          MARKDOWN_CONFIG_FILE: .markdown-lint.json
    
  linkcheck:
    name: Links
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      # https://github.com/marketplace/actions/markdown-link-check
      - uses: gaurav-nelson/github-action-markdown-link-check@v1

  StyleCheck:
    name: Style and Voice
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@master
    - name: Style check
      uses: errata-ai/vale-action@reviewdog
      env:
        GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}

  # Set the job key. The key is displayed as the job name
  # when a job name is not provided
  build-deploy:
    #Name of the job
    name: Build github pages

    #Set the type of machine to run on
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: 
      - lint
      - linkcheck
      - StyleCheck
    steps:
       # Checks out a copy of your repository on the ubuntu-latest machine
       # https://github.com/actions/checkout
      - name: Checkout code
        uses: actions/checkout@v2 
        with:
            clean: true
            token: ${{ github.token }}
      # Runs the website build
      - run: |
          wget https://github.com/magiclen/markdown2html-converter/releases/download/v1.1.6/markdown2html-converter && chmod a+x markdown2html-converter
          export PATH=$PATH:$(pwd) && mkdir site
          mkdir site/aws-cdk-intro && npx @marp-team/marp-cli@latest --html aws-cdk-intro/README.md -o site/aws-cdk-intro/index.html && cp -r aws-cdk-intro/* site/aws-cdk-intro/
          mkdir site/snowcamp_2023 && npx @marp-team/marp-cli@latest --theme snowcamp_2023/snowcamp.css --html snowcamp_2023/README.md -o site/snowcamp_2023/index.html && cp -r snowcamp_2023/* site/snowcamp_2023/
          mkdir site/doc-as-code-10min && npx @marp-team/marp-cli@latest --html doc-as-code-10min/README.md -o site/doc-as-code-10min/index.html && cp -r doc-as-code-10min/* site/doc-as-code-10min/
          ./markdown2html-converter -f -o site/index.html README.md
      - uses: actions/upload-artifact@v2
        with:
          name: slides
          path: site/index.html

      #https://github.com/marketplace/actions/deploy-to-github-pages
      - name: Deploy to GitHub Pages
        uses: JamesIves/github-pages-deploy-action@3.6.2
        with: # Set the secret as an input
          GITHUB_TOKEN: ${{ secrets.DEPLOYMENT_ACCESS_KEY }}
          BRANCH: gh_pages
          FOLDER: site

  build-pdf:
    name: Build PDF
    runs-on: ubuntu-latest
    #if: github.ref == 'refs/heads/main'
    steps:
      - run: |
          apt-get update
          apt-get -y install curl gnupg wget
          curl -sL https://deb.nodesource.com/setup_16.x | bash -
          apt-get -y install nodejs
          wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
          DEBIAN_FRONTEND=noninteractive TZ=Etc/UTC apt-get install ./google-chrome*.deb --yes
          ls -alrt
          mkdir pdf-pptx
          shopt -s extglob
          for dir in ./!(pdf|node_modules)/; do mkdir pdf-pptx/$dir && npx -y @marp-team/marp-cli@latest --allow-local-files --html $dir/slides.md -o pdf-pptx/$dir/slides.pdf && npx -y @marp-team/marp-cli@latest --allow-local-files --html $dir/slides.md -o pdf-pptx/$dir/slides.pptx; done
          ls -alrt pdf-pptx/*
